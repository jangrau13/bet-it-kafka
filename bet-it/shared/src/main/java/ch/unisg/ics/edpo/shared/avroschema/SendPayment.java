/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ch.unisg.ics.edpo.shared.avroschema;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SendPayment extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3265564547173064168L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SendPayment\",\"namespace\":\"ch.unisg.ics.edpo.shared.avroschema\",\"fields\":[{\"name\":\"amount\",\"type\":\"double\"},{\"name\":\"to_account\",\"type\":\"string\"},{\"name\":\"from_account\",\"type\":\"string\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SendPayment> ENCODER =
      new BinaryMessageEncoder<SendPayment>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SendPayment> DECODER =
      new BinaryMessageDecoder<SendPayment>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<SendPayment> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<SendPayment> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SendPayment>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this SendPayment to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a SendPayment from a ByteBuffer. */
  public static SendPayment fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public double amount;
  @Deprecated public java.lang.CharSequence to_account;
  @Deprecated public java.lang.CharSequence from_account;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SendPayment() {}

  /**
   * All-args constructor.
   * @param amount The new value for amount
   * @param to_account The new value for to_account
   * @param from_account The new value for from_account
   */
  public SendPayment(java.lang.Double amount, java.lang.CharSequence to_account, java.lang.CharSequence from_account) {
    this.amount = amount;
    this.to_account = to_account;
    this.from_account = from_account;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return amount;
    case 1: return to_account;
    case 2: return from_account;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: amount = (java.lang.Double)value$; break;
    case 1: to_account = (java.lang.CharSequence)value$; break;
    case 2: from_account = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.lang.Double getAmount() {
    return amount;
  }

  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.lang.Double value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'to_account' field.
   * @return The value of the 'to_account' field.
   */
  public java.lang.CharSequence getToAccount() {
    return to_account;
  }

  /**
   * Sets the value of the 'to_account' field.
   * @param value the value to set.
   */
  public void setToAccount(java.lang.CharSequence value) {
    this.to_account = value;
  }

  /**
   * Gets the value of the 'from_account' field.
   * @return The value of the 'from_account' field.
   */
  public java.lang.CharSequence getFromAccount() {
    return from_account;
  }

  /**
   * Sets the value of the 'from_account' field.
   * @param value the value to set.
   */
  public void setFromAccount(java.lang.CharSequence value) {
    this.from_account = value;
  }

  /**
   * Creates a new SendPayment RecordBuilder.
   * @return A new SendPayment RecordBuilder
   */
  public static ch.unisg.ics.edpo.shared.avroschema.SendPayment.Builder newBuilder() {
    return new ch.unisg.ics.edpo.shared.avroschema.SendPayment.Builder();
  }

  /**
   * Creates a new SendPayment RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SendPayment RecordBuilder
   */
  public static ch.unisg.ics.edpo.shared.avroschema.SendPayment.Builder newBuilder(ch.unisg.ics.edpo.shared.avroschema.SendPayment.Builder other) {
    return new ch.unisg.ics.edpo.shared.avroschema.SendPayment.Builder(other);
  }

  /**
   * Creates a new SendPayment RecordBuilder by copying an existing SendPayment instance.
   * @param other The existing instance to copy.
   * @return A new SendPayment RecordBuilder
   */
  public static ch.unisg.ics.edpo.shared.avroschema.SendPayment.Builder newBuilder(ch.unisg.ics.edpo.shared.avroschema.SendPayment other) {
    return new ch.unisg.ics.edpo.shared.avroschema.SendPayment.Builder(other);
  }

  /**
   * RecordBuilder for SendPayment instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SendPayment>
    implements org.apache.avro.data.RecordBuilder<SendPayment> {

    private double amount;
    private java.lang.CharSequence to_account;
    private java.lang.CharSequence from_account;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ch.unisg.ics.edpo.shared.avroschema.SendPayment.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.amount)) {
        this.amount = data().deepCopy(fields()[0].schema(), other.amount);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.to_account)) {
        this.to_account = data().deepCopy(fields()[1].schema(), other.to_account);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.from_account)) {
        this.from_account = data().deepCopy(fields()[2].schema(), other.from_account);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SendPayment instance
     * @param other The existing instance to copy.
     */
    private Builder(ch.unisg.ics.edpo.shared.avroschema.SendPayment other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.amount)) {
        this.amount = data().deepCopy(fields()[0].schema(), other.amount);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.to_account)) {
        this.to_account = data().deepCopy(fields()[1].schema(), other.to_account);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.from_account)) {
        this.from_account = data().deepCopy(fields()[2].schema(), other.from_account);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.lang.Double getAmount() {
      return amount;
    }

    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public ch.unisg.ics.edpo.shared.avroschema.SendPayment.Builder setAmount(double value) {
      validate(fields()[0], value);
      this.amount = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public ch.unisg.ics.edpo.shared.avroschema.SendPayment.Builder clearAmount() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'to_account' field.
      * @return The value.
      */
    public java.lang.CharSequence getToAccount() {
      return to_account;
    }

    /**
      * Sets the value of the 'to_account' field.
      * @param value The value of 'to_account'.
      * @return This builder.
      */
    public ch.unisg.ics.edpo.shared.avroschema.SendPayment.Builder setToAccount(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.to_account = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'to_account' field has been set.
      * @return True if the 'to_account' field has been set, false otherwise.
      */
    public boolean hasToAccount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'to_account' field.
      * @return This builder.
      */
    public ch.unisg.ics.edpo.shared.avroschema.SendPayment.Builder clearToAccount() {
      to_account = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'from_account' field.
      * @return The value.
      */
    public java.lang.CharSequence getFromAccount() {
      return from_account;
    }

    /**
      * Sets the value of the 'from_account' field.
      * @param value The value of 'from_account'.
      * @return This builder.
      */
    public ch.unisg.ics.edpo.shared.avroschema.SendPayment.Builder setFromAccount(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.from_account = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'from_account' field has been set.
      * @return True if the 'from_account' field has been set, false otherwise.
      */
    public boolean hasFromAccount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'from_account' field.
      * @return This builder.
      */
    public ch.unisg.ics.edpo.shared.avroschema.SendPayment.Builder clearFromAccount() {
      from_account = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SendPayment build() {
      try {
        SendPayment record = new SendPayment();
        record.amount = fieldSetFlags()[0] ? this.amount : (java.lang.Double) defaultValue(fields()[0]);
        record.to_account = fieldSetFlags()[1] ? this.to_account : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.from_account = fieldSetFlags()[2] ? this.from_account : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SendPayment>
    WRITER$ = (org.apache.avro.io.DatumWriter<SendPayment>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SendPayment>
    READER$ = (org.apache.avro.io.DatumReader<SendPayment>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
