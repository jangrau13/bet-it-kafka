
services:
  zeebe:
    image: camunda/zeebe:${CAMUNDA_PLATFORM_VERSION:-8.2.1}
    container_name: zeebe
    environment:
      - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_CLASSNAME=io.camunda.zeebe.exporter.ElasticsearchExporter
      - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_URL=http://elasticsearch:9200
      - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_BULK_SIZE=1
      - zeebe.tasklist.elasticsearch.username=
    ports:
      - 26500:26500
    volumes:
      - zeebe:/usr/local/zeebe/data
    networks:
      - bet-it
    depends_on:
      - elasticsearch

  ksqldb-server:
    image: confluentinc/ksqldb-server:0.28.2
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - kafka
    ports:
      - "8488:8088"
    networks:
      - bet-it
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: kafka:9092
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQLDB_AUTO_OFFSET_RESET: "earliest"

  ksqldb-cli:
    image: confluentinc/ksqldb-cli:0.28.2
    container_name: ksqldb-cli
    networks:
      - bet-it
    depends_on:
      - kafka
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true

  connectors: # https://docs.camunda.io/docs/components/integration-framework/connectors/out-of-the-box-connectors/available-connectors-overview/
    image: camunda/connectors-bundle:${CAMUNDA_CONNECTORS_VERSION:-0.16.1}
    container_name: connectors
    environment:
      - ZEEBE_CLIENT_BROKER_GATEWAY-ADDRESS=zeebe:26500
      - ZEEBE_CLIENT_SECURITY_PLAINTEXT=true
      - CAMUNDA_OPERATE_CLIENT_URL=http://operate:8080
      - CAMUNDA_OPERATE_CLIENT_USERNAME=demo
      - CAMUNDA_OPERATE_CLIENT_PASSWORD=demo
    env_file: connector-secrets.txt
    networks:
      - bet-it
    depends_on:
      - zeebe
      - operate

  operate:
    image: camunda/operate:${CAMUNDA_PLATFORM_VERSION:-8.2.1}
    container_name: operate
    environment:
      - CAMUNDA_OPERATE_ZEEBE_GATEWAYADDRESS=zeebe:26500
      - CAMUNDA_OPERATE_ELASTICSEARCH_URL=http://elasticsearch:9200
      - CAMUNDA_OPERATE_ZEEBEELASTICSEARCH_URL=http://elasticsearch:9200
    ports:
      - 8180:8080
    networks:
      - bet-it
    depends_on:
      - elasticsearch

  tasklist:
    image: camunda/tasklist:${CAMUNDA_PLATFORM_VERSION:-8.2.1}
    container_name: tasklist
    environment:
      - CAMUNDA_TASKLIST_ZEEBE_GATEWAYADDRESS=zeebe:26500
      - CAMUNDA_TASKLIST_ELASTICSEARCH_URL=http://elasticsearch:9200
      - CAMUNDA_TASKLIST_ZEEBEELASTICSEARCH_URL=http://elasticsearch:9200
    ports:
      - 8181:8080
    networks:
      - bet-it
    depends_on:
      - elasticsearch


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION:-7.16.1}
    container_name: elasticsearch
    environment:
      - cluster.name=camunda-cloud
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elastic:/usr/share/elasticsearch/data
    networks:
      - bet-it


  zookeeper:
    image: "bitnami/zookeeper:latest"
    hostname: zookeeper
    container_name: zookeeper
    networks:
      - bet-it
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ALLOW_ANONYMOUS_LOGIN: 'yes'
    volumes:
      - zookeeper:/bitnami/zookeeper/data

  kafka:
    image: "bitnami/kafka:latest"
    hostname: kafka
    container_name: kafka
    restart: always
    networks:
      - bet-it
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ADVERTISED_HOST_NAME: kafka
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka:/bitnami/kafka/data
    depends_on:
      - zookeeper


  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    networks:
      - bet-it
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - kafka


  bet-it-platform:
    build:
      context: bet-platform
      dockerfile: Dockerfile
    networks:
      - bet-it
    ports:
      - "8082:8082"
    depends_on:
      - kafka
  bank:
    build:
      context: bank
      dockerfile: Dockerfile
    networks:
      - bet-it
    ports:
      - "8081:8081"
    depends_on:
      - kafka

  game-master:
    build:
      context: game-master
      dockerfile: Dockerfile
    networks:
      - bet-it
    ports:
      - "8083:8083"
    depends_on:
      - kafka
      - ksqldb-cli
      - ksqldb-server

  zeebe-addon:
    restart: always
    build:
      context: zeebe-addon
      dockerfile: Dockerfile
    networks:
      - bet-it
    ports:
      - "8084:8084"
    depends_on:
      - kafka
      - schema-registry
      - zeebe
      - connectors
      - kafka-create-topics

  dot-game-frontend:
    build:
      context: dot-game-frontend
      dockerfile: Dockerfile
    networks:
      - bet-it
    ports:
      - "3000:3000"
    depends_on:
      - kafka

  dot-game-backend:
    hostname: dot-game-backend
    restart: always
    build:
      context: dot-game-backend
      dockerfile: Dockerfile
    networks:
      - bet-it
    ports:
      - "3001:3001"
      - "6969:6969"
    depends_on:
      - kafka
      - schema-registry

  fraud-detector:
    hostname: fraud-detector
    container_name: fraud-detector
    build:
      context: fraud-detector
      dockerfile: Dockerfile
    networks:
      - bet-it
    ports:
      - "8095:8095"
    depends_on:
      - kafka
      - schema-registry

  schema-registry:
    image: confluentinc/cp-schema-registry:5.2.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - kafka
    networks:
      - bet-it
    ports:
      - "8085:8085"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8085

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.4.0
    hostname: control-center
    container_name: control-center
    networks:
      - bet-it
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8085"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  kafka-create-topics:
    image: confluentinc/cp-enterprise-kafka:6.0.0
    depends_on:
      - kafka
      - zookeeper
    hostname: kafka-create-topics
    command: [ "bash", "./create-topics.sh" ]
    working_dir: /scripts
    volumes:
      - ./scripts1:/scripts
    networks:
      - bet-it

volumes:
  zeebe:
    driver: local
  elastic:
    driver: local
  zookeeper:
    driver: local
  kafka:
    driver: local


networks:
  bet-it:
    driver: bridge
