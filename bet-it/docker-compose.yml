
services:
  zeebe:
    image: camunda/zeebe:${CAMUNDA_CLOUD_VERSION:-1.3.5}
    container_name: zeebe
    environment:
      - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_CLASSNAME=io.camunda.zeebe.exporter.ElasticsearchExporter
      - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_URL=http://elasticsearch:9200
      - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_BULK_SIZE=1
    ports:
      - 26500:26500
    volumes:
      - zeebe:/usr/local/zeebe/data
    networks:
      - bet-it
    depends_on:
      - elasticsearch

  operate:
    image: camunda/operate:${CAMUNDA_CLOUD_VERSION:-1.3.5}
    container_name: operate
    environment:
      - CAMUNDA_OPERATE_ZEEBE_GATEWAYADDRESS=zeebe:26500
      - CAMUNDA_OPERATE_ELASTICSEARCH_URL=http://elasticsearch:9200
      - CAMUNDA_OPERATE_ZEEBEELASTICSEARCH_URL=http://elasticsearch:9200
    ports:
      - 8180:8080
    networks:
      - bet-it
    depends_on:
      - elasticsearch

  tasklist:
    image: camunda/tasklist:${CAMUNDA_CLOUD_VERSION:-1.3.5}
    container_name: tasklist
    environment:
      - CAMUNDA_TASKLIST_ZEEBE_GATEWAYADDRESS=zeebe:26500
      - CAMUNDA_TASKLIST_ELASTICSEARCH_URL=http://elasticsearch:9200
      - CAMUNDA_TASKLIST_ZEEBEELASTICSEARCH_URL=http://elasticsearch:9200
    ports:
      - 8181:8080
    networks:
      - bet-it
    depends_on:
      - elasticsearch


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION:-7.16.1}
    container_name: elasticsearch
    environment:
      - cluster.name=camunda-cloud
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elastic:/usr/share/elasticsearch/data
    networks:
      - bet-it


  zookeeper:
    image: "bitnami/zookeeper:latest"
    hostname: zookeeper
    networks:
      - bet-it
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ALLOW_ANONYMOUS_LOGIN: 'yes'

  kafka:
    image: "bitnami/kafka:latest"
    hostname: kafka
    networks:
      - bet-it
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ADVERTISED_HOST_NAME: kafka
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

    depends_on:
      - zookeeper

  schemaregistry:
    image: confluentinc/cp-schema-registry:5.2.1
    restart: always
    networks:
      - bet-it
    depends_on:
      - zookeeper
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
      SCHEMA_REGISTRY_HOST_NAME: schemaregistry
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
    ports:
      - 8281:8081

  connect:
    image: confluentinc/cp-kafka-connect:5.2.1
    depends_on:
      - zookeeper
      - kafka
      - schemaregistry
    networks:
      - bet-it
    ports:
      - "8283:8083"
    volumes:
      - ./zeebe_kafka_connect:/etc/kafka-connect/jars/
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:9092"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR,io.zeebe.kafka-connect-zeebe=DEBUG"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: '/usr/share/java,/etc/kafka-connect/jars'
      ALLOW_PLAINTEXT_LISTENER: 'yes'

  control-center:
    image: confluentinc/cp-enterprise-control-center:5.5.3
    hostname: control-center
    ports:
      - "9221:9021"
    networks:
      - bet-it
    environment:
      CONTROL_CENTER_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "kafka:9092"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_CONNECT_CLUSTER: "connect:8283"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
    depends_on:
      - zookeeper
      - schemaregistry
      - kafka
      - connect


  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    networks:
      - bet-it
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - kafka


  bet-it-platform:
    build:
      context: bet-platform
      dockerfile: Dockerfile
    networks:
      - bet-it
    ports:
      - "8082:8082"
    depends_on:
      - kafka
  bank:
    build:
      context: bank
      dockerfile: Dockerfile
    networks:
      - bet-it
    ports:
      - "8081:8081"
    depends_on:
      - kafka

  game-master:
    build:
      context: game-master
      dockerfile: Dockerfile
    networks:
      - bet-it
    ports:
      - "8083:8083"
    depends_on:
      - kafka

  monitor:
    build:
      context: monitor
      dockerfile: Dockerfile
    networks:
      - bet-it
    ports:
      - "8095:8095"
    depends_on:
      - kafka
    environment:
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092

volumes:
  zeebe:
    driver: local
  elastic:
    driver: local


networks:
  bet-it:
    driver: bridge
